1) Uncaught TypeError: Cannot read property 
Example:
Code Snippet with error
var obj = {};
console.log(obj.prop1.deepProp);

How to avoid the error

console.log(obj.prop1 && obj.prop1.deepProp); 


2) TypeError: ‘undefined’ is not an object (evaluating
This is an error that occurs in Safari when you read a property or call a method on an undefined object. 
You can test this very easily in the Safari Developer Console.This is essentially the same as the above error
for Chrome, but Safari uses a different error message.
Example:
var testArray = undefined
 if(testArray.length ===0){
	console.log("Array is empty")
 }

How to avoid the error
var testArray = undefined
if(testArray && testArray.length ===0){
	console.log("Array is empty")
 }

3) TypeError: null is not an object (evaluating
This is an error that occurs in Safari when you read a property or call a method on a null object. 
You can test this very easily in the Safari Developer Console.

One way this error might occur in a real world example is if you try using a DOM element in your JavaScript before the element is loaded. 
That’s because the DOM API returns null for object references that are blank.

Any JS code that executes and deals with DOM elements should execute after the DOM elements have been created. JS code is interpreted from 
top to down as laid out in the HTML. So, if there is a tag before the DOM elements, the JS code within script tag will execute as the browser 
parses the HTML page. You will get this error if the DOM elements have not been created before loading the script.
Example:
var testArray = null
 if(testArray.length ===0){
	console.log("Array is empty")
 }

How to avoid the error
var testArray = null
if(testArray && testArray.length ===0){
	console.log("Array is empty")
 }

4)(unknown): Script error
The Script error occurs when an uncaught JavaScript error crosses domain boundaries in violation of the cross-origin policy. 
For example, if you host your JavaScript code on a CDN, any uncaught errors (errors that bubble up to the window.onerror handler, 
instead of being caught in try-catch) will get reported as simply "Script error" instead of containing useful information. 
This is a browser security measure intended to prevent passing data across domains that otherwise wouldn’t be allowed to communicate.

5)TypeError: Object doesn’t support property
This is an error that occurs in IE when you call an undefined method. You can test this in the IE Developer Console.
This is equivalent to the error "TypeError: ‘undefined’ is not a function" in Chrome. Yes, different browsers can have 
different error messages for the same logical error.
Example:
this.isAwesome()


